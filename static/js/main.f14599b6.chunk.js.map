{"version":3,"sources":["components/CarList/CarList.module.css","redux/actions/actions.ts","components/Car/ActiveCar/ActiveCar.tsx","common/localStorage/localStorage.ts","common/idGenerator/idGenerator.ts","components/UI/Modal/Modal.tsx","components/UI/Header/Header.tsx","components/Layout/Layout.tsx","components/CarList/ActiveCarList/ActiveCarList.tsx","components/Car/CompletedCar/CompletedCar.tsx","components/CarList/CompletedCarList/CompletedCarList.tsx","App.tsx","reportWebVitals.ts","redux/reducers/activeCarListReducer.ts","redux/reducers/completedCarListReducer.ts","redux/rootReducer/rootReducer.ts","redux/store/store.ts","index.tsx"],"names":["module","exports","ActiveCarActionTypes","CompletedCarActionTypes","ActiveCar","id","carName","carArrivalDate","carProblem","onClick","className","style","width","getStateFromLocalStorage","key","JSON","parse","localStorage","getItem","setStateToLocalStorage","state","stateJSON","stringify","setItem","generateId","cars","length","connect","dispatch","addCar","car","type","payload","useState","carNameValue","setCarNameValue","carProblemValue","setCarProblemValue","changeHandler","event","target","value","tabIndex","aria-labelledby","aria-hidden","data-bs-dismiss","aria-label","htmlFor","placeholder","onChange","required","rows","form","Date","toDateString","forms","document","querySelectorAll","Array","prototype","slice","call","forEach","addEventListener","checkValidity","preventDefault","stopPropagation","classList","add","Header","location","useLocation","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","to","linkText","map","link","pathname","Layout","props","children","activeCars","completedCars","completeCar","removeCar","carCompleteDate","useEffect","console","log","classes","CarListWrapper","CompletedCar","clearCars","App","from","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","newState","filter","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f14599b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CarListWrapper\":\"CarList_CarListWrapper__5bl5P\"};","import { IActiveCarProps } from \"../../components/Car/ActiveCar/ActiveCar\";\r\nimport { ICompletedCarProps } from \"../../components/Car/CompletedCar/CompletedCar\";\r\n\r\n//ActiveActions\r\n\r\nexport enum ActiveCarActionTypes{\r\n    addCar = \"ADD_CAR\",\r\n    removeCar = \"REMOVE_CAR\"\r\n}\r\n\r\ntype addNewCarAction = {type: ActiveCarActionTypes.addCar, payload: IActiveCarProps};\r\ntype removeCarAction = {type: ActiveCarActionTypes.removeCar, payload: IActiveCarProps}\r\n\r\nexport type IActiveCarAction = addNewCarAction | removeCarAction\r\n\r\n//CompletedActions\r\n\r\nexport enum CompletedCarActionTypes{\r\n    clearCars = \"CLEAR_CARS\",\r\n    completeCar =\"COMPLETE_CAR\"\r\n}\r\ntype clearCarsAction = {type: CompletedCarActionTypes.clearCars}\r\ntype addCarAction = {type: CompletedCarActionTypes.completeCar, payload: ICompletedCarProps}\r\nexport type ICompletedCarAction = clearCarsAction | addCarAction\r\n\r\n//=========\r\n\r\nexport type CarAction = IActiveCarAction | ICompletedCarAction","export interface IActiveCarProps {\r\n  id: number;\r\n  carName: string;\r\n  carProblem: string;\r\n  carArrivalDate: string;\r\n  onClick?: () => void;\r\n}\r\nconst ActiveCar = ({\r\n  id,\r\n  carName,\r\n  carArrivalDate,\r\n  carProblem,\r\n  onClick,\r\n}: IActiveCarProps) => {\r\n  return (\r\n    <div className=\"card m-3\" style={{ width: \"100%\" }}>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{carName}</h5>\r\n        <p className=\"card-text\">{carProblem}</p>\r\n        <button className=\"btn btn-primary\" onClick={onClick}>\r\n          Done!\r\n        </button>\r\n      </div>\r\n      <div className=\"card-footer text-muted\">\r\n        <span>Arrived: {carArrivalDate}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActiveCar;\r\n","import { IActiveCarListState } from \"../../redux/reducers/activeCarListReducer\";\r\nimport { ICompletedCarListState } from \"../../redux/reducers/completedCarListReducer\";\r\n\r\ntype LocalStorageStates = \"active\" | \"completed\"\r\n\r\ntype StatesTypes = IActiveCarListState | ICompletedCarListState;\r\n\r\nexport const getStateFromLocalStorage = (key: LocalStorageStates): StatesTypes => {\r\n  const state = JSON.parse(localStorage.getItem(key) || \"{}\");\r\n  return state;\r\n};\r\n\r\nexport const setStateToLocalStorage = (key: LocalStorageStates, state: StatesTypes) => {\r\n  const stateJSON = JSON.stringify(state);\r\n  localStorage.setItem(key, stateJSON);\r\n};\r\n","import {getStateFromLocalStorage} from '../localStorage/localStorage'\r\n\r\nexport const generateId = ():number =>{\r\n    const state = getStateFromLocalStorage('active');\r\n    if(state.cars.length){\r\n        return state.cars[state.cars.length -1].id + 1\r\n    }\r\n    else{\r\n        return 0\r\n    }\r\n}","import React, { Dispatch, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  ActiveCarActionTypes,\r\n  IActiveCarAction,\r\n} from \"../../../redux/actions/actions\";\r\nimport { IActiveCarProps } from \"../../Car/ActiveCar/ActiveCar\";\r\nimport { generateId } from \"../../../common/idGenerator/idGenerator\";\r\ninterface IModalProps {\r\n  addCar: (car: IActiveCarProps) => void;\r\n}\r\nconst Modal = ({ addCar }: IModalProps) => {\r\n  const [carNameValue, setCarNameValue] = useState<string>(\"\");\r\n  const [carProblemValue, setCarProblemValue] = useState<string>(\"\");\r\n  const changeHandler = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    switch (event.target.id) {\r\n      case \"carNameInput\": {\r\n        setCarNameValue(event.target.value);\r\n        break;\r\n      }\r\n      case \"carProblemTextArea\": {\r\n        setCarProblemValue(event.target.value);\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const clickHandler = () => {\r\n    const car: IActiveCarProps = {\r\n      id: generateId(),\r\n      carArrivalDate: new Date().toDateString(),\r\n      carName: carNameValue,\r\n      carProblem: carProblemValue,\r\n    };\r\n    let forms = document.querySelectorAll(\".needs-validation\");\r\n    Array.prototype.slice.call(forms).forEach(function (form) {\r\n      form.addEventListener(\r\n        \"submit\",\r\n        function (event: React.ChangeEvent) {\r\n          if (!form.checkValidity()) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n          }\r\n          form.classList.add(\"was-validated\");\r\n        },\r\n        false\r\n      );\r\n    });\r\n    if (carNameValue && carProblemValue) {\r\n      addCar(car);\r\n      setCarNameValue(\"\");\r\n      setCarProblemValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className=\"modal fade\"\r\n      id=\"modal\"\r\n      tabIndex={-1}\r\n      aria-labelledby=\"modalLabel\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <div className=\"modal-dialog\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\" id=\"modalLabel\">\r\n              Add New Car\r\n            </h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-close\"\r\n              data-bs-dismiss=\"modal\"\r\n              aria-label=\"Close\"\r\n            ></button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <form className=\"column g-3 needs-validation\" id=\"addCarForm\">\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"carNameInput\" className=\"form-label\">\r\n                  Car name:\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"carNameInput\"\r\n                  placeholder=\"Car name\"\r\n                  value={carNameValue}\r\n                  onChange={changeHandler}\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"carProblemTextArea\" className=\"form-label\">\r\n                  Car problem:\r\n                </label>\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  id=\"carProblemTextArea\"\r\n                  rows={4}\r\n                  value={carProblemValue}\r\n                  onChange={changeHandler}\r\n                  required\r\n                ></textarea>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-bs-dismiss=\"modal\"\r\n            >\r\n              Close\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              form=\"addCarForm\"\r\n              className=\"btn btn-success\"\r\n              data-bs-dismiss={carNameValue && carProblemValue ? \"modal\" : null}\r\n              onClick={clickHandler}\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<IActiveCarAction>) => ({\r\n  addCar: (car: IActiveCarProps) =>\r\n    dispatch({ type: ActiveCarActionTypes.addCar, payload: car }),\r\n});\r\nexport default connect(null, mapDispatchToProps)(Modal);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport { useLocation } from \"react-router-dom\";\r\nconst Header = () => {\r\n  const location = useLocation();\r\n  interface ILink {\r\n    to: string;\r\n    linkText: string;\r\n  }\r\n  const linkArray: ILink[] = [\r\n    {\r\n      to: \"/waveaccess-test/active\",\r\n      linkText: \"Active\",\r\n    },\r\n    {\r\n      to: \"/waveaccess-test/completed\",\r\n      linkText: \"Completed\",\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <header className=\"sticky-top\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark p-3\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarNavAltMarkup\"\r\n            aria-controls=\"navbarNavAltMarkup\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <span className=\"navbar-brand\">Car Service</span>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n            <div className=\"navbar-nav\">\r\n              {linkArray.map((link) => {\r\n                return (\r\n                  <Link\r\n                    className={`nav-link ${\r\n                      link.to === location.pathname ? \"active\" : \"\"\r\n                    }`}\r\n                    to={link.to}\r\n                    key={link.linkText}\r\n                  >\r\n                    {link.linkText}\r\n                  </Link>\r\n                );\r\n              })}\r\n              <button\r\n                className=\"btn btn-success\"\r\n                data-bs-toggle=\"modal\"\r\n                data-bs-target=\"#modal\"\r\n              >\r\n                Add new car\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n      <Modal />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Header from \"../UI/Header/Header\";\r\nconst Layout:React.FC = (props) => {\r\n    return(\r\n        <>\r\n        <Header></Header>\r\n        {props.children}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Layout","import React, { Dispatch, useEffect } from \"react\";\r\nimport classes from \"../CarList.module.css\";\r\nimport ActiveCar from \"../../Car/ActiveCar/ActiveCar\";\r\nimport { IActiveCarProps } from \"../../Car/ActiveCar/ActiveCar\";\r\nimport { connect } from \"react-redux\";\r\nimport { IRootState } from \"../../../redux/rootState/rootState\";\r\nimport {\r\n  ActiveCarActionTypes,\r\n  CompletedCarActionTypes,\r\n  CarAction,\r\n} from \"../../../redux/actions/actions\";\r\nimport Layout from \"../../Layout/Layout\";\r\nimport { setStateToLocalStorage } from \"../../../common/localStorage/localStorage\";\r\nimport { ICompletedCarProps } from \"../../Car/CompletedCar/CompletedCar\";\r\n\r\ninterface IActiveCarListProps {\r\n  cars: IActiveCarProps[];\r\n  completedCars: ICompletedCarProps[];\r\n  completeCar: (car: IActiveCarProps) => void;\r\n}\r\n\r\nconst ActiveCarList = ({\r\n  cars,\r\n  completedCars,\r\n  completeCar,\r\n}: IActiveCarListProps) => {\r\n  useEffect(() => {\r\n    console.log(\"setLocalStorage\");\r\n    setStateToLocalStorage(\"active\", { cars });\r\n    setStateToLocalStorage(\"completed\", { cars: completedCars });\r\n  }, [cars, completedCars]);\r\n  return (\r\n    <Layout>\r\n      <div className={classes.CarListWrapper}>\r\n        {cars.length ? (\r\n          <>\r\n            {cars.map((car) => {\r\n              return (\r\n                <ActiveCar\r\n                  key={car.id}\r\n                  {...car}\r\n                  onClick={() => completeCar(car)}\r\n                />\r\n              );\r\n            })}\r\n          </>\r\n        ) : (\r\n          <h2>Add an active car to show it here</h2>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  cars: state.activeCars.cars,\r\n  completedCars: state.completedCars.cars,\r\n});\r\nconst mapDispatchToProps = (dispatch: Dispatch<CarAction>) => ({\r\n  completeCar: (car: IActiveCarProps) => {\r\n    dispatch({ type: ActiveCarActionTypes.removeCar, payload: car });\r\n    dispatch({\r\n      type: CompletedCarActionTypes.completeCar,\r\n      payload: { ...car, carCompleteDate: new Date().toDateString() },\r\n    });\r\n  },\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveCarList);\r\n","import { IActiveCarProps } from \"../ActiveCar/ActiveCar\";\r\nexport interface ICompletedCarProps extends IActiveCarProps {\r\n  carCompleteDate: string;\r\n}\r\nconst CompletedCar = ({\r\n  carArrivalDate,\r\n  id,\r\n  carCompleteDate,\r\n  carName,\r\n  carProblem,\r\n}: ICompletedCarProps) => {\r\n  return (\r\n    <div className=\"card m-3\" style={{ width: \"100%\" }}>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{carName}</h5>\r\n        <p className=\"card-text\">{carProblem}</p>\r\n      </div>\r\n      <div className=\"card-footer text-muted\">\r\n        <span>Arrived: {carArrivalDate}</span>\r\n        <br></br>\r\n        <span>Done: {carCompleteDate}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompletedCar;\r\n","import React, { Dispatch, useEffect } from \"react\";\r\nimport { ICompletedCarProps } from \"../../Car/CompletedCar/CompletedCar\";\r\nimport classes from \"../CarList.module.css\";\r\nimport CompletedCar from \"../../Car/CompletedCar/CompletedCar\";\r\nimport { connect } from \"react-redux\";\r\nimport { IRootState } from \"../../../redux/rootState/rootState\";\r\nimport Layout from \"../../Layout/Layout\";\r\nimport {\r\n  CarAction,\r\n  CompletedCarActionTypes,\r\n} from \"../../../redux/actions/actions\";\r\nimport { setStateToLocalStorage } from \"../../../common/localStorage/localStorage\";\r\nimport { IActiveCarProps } from \"../../Car/ActiveCar/ActiveCar\";\r\ninterface ICompletedCarListProps {\r\n  cars: ICompletedCarProps[];\r\n  activeCars: IActiveCarProps[];\r\n  clearCars: () => void;\r\n}\r\n\r\nconst CompletedCarList = ({ cars, activeCars, clearCars }: ICompletedCarListProps) => {\r\n  useEffect(() => {\r\n    console.log(\"setLocalStorage\");\r\n    setStateToLocalStorage(\"active\", {cars: activeCars});\r\n    setStateToLocalStorage(\"completed\", { cars });\r\n  }, [cars, activeCars]);\r\n  return (\r\n    <Layout>\r\n      <div className={classes.CarListWrapper}>\r\n        {cars.length ? (\r\n          <>\r\n            <button className=\"btn btn-danger\" onClick={clearCars}>\r\n              Clear all cars\r\n            </button>\r\n            {cars.map((car) => {\r\n              return <CompletedCar key={car.id} {...car} />;\r\n            })}\r\n          </>\r\n        ) : (\r\n          <h2>There is no completed cars</h2>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  cars: state.completedCars.cars,\r\n  activeCars: state.activeCars.cars\r\n});\r\nconst mapDispatchToProps = (dispatch: Dispatch<CarAction>) => ({\r\n  clearCars: () => dispatch({ type: CompletedCarActionTypes.clearCars }),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompletedCarList);\r\n","import React from \"react\";\nimport ActiveCarList from \"./components/CarList/ActiveCarList/ActiveCarList\";\nimport { BrowserRouter, Redirect, Route } from \"react-router-dom\";\nimport CompletedCarList from \"./components/CarList/CompletedCarList/CompletedCarList\";\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Redirect from=\"/waveaccess-test/\" to=\"/waveaccess-test/active\"></Redirect>\n      <Route path=\"/waveaccess-test/active\" exact>\n        <ActiveCarList></ActiveCarList>\n      </Route>\n      <Route path=\"/waveaccess-test/completed\" exact>\n        <CompletedCarList></CompletedCarList>\n      </Route>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { IActiveCarProps } from '../../components/Car/ActiveCar/ActiveCar';\r\nimport { IActiveCarAction } from \"../actions/actions\";\r\nimport {ActiveCarActionTypes} from '../actions/actions'\r\nimport { setStateToLocalStorage, getStateFromLocalStorage } from '../../common/localStorage/localStorage';\r\nexport interface IActiveCarListState{\r\n    cars:IActiveCarProps[];\r\n}\r\nif(!getStateFromLocalStorage('active').cars){\r\n    setStateToLocalStorage('active', {cars:[]})\r\n}\r\nconst initialState:IActiveCarListState = getStateFromLocalStorage('active');\r\n\r\nexport const activeCarListReducer = (state = initialState, action:IActiveCarAction) =>{\r\n    switch(action.type){\r\n        case ActiveCarActionTypes.addCar:{\r\n            return {...state, cars: [...state.cars, action.payload]};\r\n        }\r\n        case ActiveCarActionTypes.removeCar:{\r\n            let newState = state.cars;\r\n            newState = newState.filter((car)=>{\r\n                return car.id !== action.payload.id\r\n            })\r\n            return {...state, cars:newState};\r\n        }\r\n        default: return state;\r\n    }\r\n}","import { ICompletedCarProps } from \"../../components/Car/CompletedCar/CompletedCar\";\r\nimport {\r\n  CompletedCarActionTypes,\r\n  ICompletedCarAction,\r\n} from \"../actions/actions\";\r\nimport {\r\n  getStateFromLocalStorage,\r\n  setStateToLocalStorage,\r\n} from \"../../common/localStorage/localStorage\";\r\n\r\nexport interface ICompletedCarListState {\r\n  cars: ICompletedCarProps[];\r\n}\r\nif (!getStateFromLocalStorage(\"completed\").cars) {\r\n  setStateToLocalStorage(\"completed\", { cars: [] });\r\n}\r\nconst initialState = getStateFromLocalStorage(\"completed\");\r\n\r\nexport const completedCarListReducer = (\r\n  state = initialState,\r\n  action: ICompletedCarAction\r\n) => {\r\n  switch (action.type) {\r\n    case CompletedCarActionTypes.clearCars: {\r\n      const newState = { ...state, cars: [] };\r\n      return newState;\r\n    }\r\n    case CompletedCarActionTypes.completeCar: {\r\n      const newState = { ...state, cars: [...state.cars, action.payload] };\r\n      return newState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { activeCarListReducer } from \"../reducers/activeCarListReducer\";\r\nimport { completedCarListReducer } from \"../reducers/completedCarListReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    activeCars: activeCarListReducer,\r\n    completedCars: completedCarListReducer\r\n})","\r\nimport { createStore } from \"redux\";\r\nimport { rootReducer } from \"../rootReducer/rootReducer\";\r\n\r\n\r\nexport const store = createStore(rootReducer)","import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store/store\";\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}